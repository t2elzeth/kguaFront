image: tiangolo/docker-with-compose:latest
stages:
  - build
  - deploy

variables:
  REGISTRY_NAME: docker-registry.choco.kz
  CONTAINER_IMAGE_NAME: docker-registry.choco.kz/payment-processing/frontier/ioka-landing
  CONTAINER_CURRENT_IMAGE_NAME: $CONTAINER_IMAGE_NAME:$CI_COMMIT_REF_SLUG
  LOGIN_DOCKER: echo "$CI_REGISTRY_PASSWORD" | docker login --username $CI_REGISTRY_USER --password-stdin $REGISTRY_NAME
  GIT_DEPTH: 1

.apply: &apply
  image: docker-registry.choco.kz/payment-processing/devops/seed/kubectl:latest
  stage: deploy
  tags:
    - tests
  before_script:
    - $LOGIN_DOCKER
    - mkdir -p ~/.docker && echo ${NEXUS_REGISTRY} | base64 -d > ~/.docker/config.json
    - export SSM_ARN_FOR_ENV_FILE=$(aws secretsmanager --region eu-north-1 list-secrets --filters Key=name,Values=${SSM_PATH} | jq '.[][0].ARN')
    - aws eks update-kubeconfig --name $CLUSTER_NAME --region $AWS_REGION
  script:
    - export MAX_REPLICAS=$(( $REPLICAS * 3 ))
    - cat ${PATH_TO_K8S_SCRIPTS}/deployment.yaml | envsubst > ${CI_PROJECT_TITLE}-deployment.yaml
    - cat ${PATH_TO_K8S_SCRIPTS}/ingress-route.yaml | envsubst > ${CI_PROJECT_TITLE}-ingress-route.yaml
    - cat ${CI_PROJECT_TITLE}-deployment.yaml
    - cat ${CI_PROJECT_TITLE}-ingress-route.yaml
    - kubectl apply -f ${CI_PROJECT_TITLE}-deployment.yaml
    - kubectl apply -f ${CI_PROJECT_TITLE}-ingress-route.yaml
    - sh ./k8s/deploy-checker.sh

.build: &build
  stage: build
  tags:
    - docker
  before_script:
    - $LOGIN_DOCKER
    - mkdir -p ~/.docker && echo ${NEXUS_REGISTRY} | base64 -d > ~/.docker/config.json
    - pip install awscli
  script:
    - echo $(aws ecr get-login-password --region $AWS_REGION) | docker login --username AWS --password-stdin $AWS_CONTAINER_REPOSITORY_URL
    - docker build . -f $PATH_TO_DOCKERFILE -t $AWS_CONTAINER_REPOSITORY_URL/$PATH_TO_REPO:$AWS_TAG --build-arg PACKAGE_NAME=$PACKAGE_NAME --build-arg SERVER_URL=$SERVER_URL --build-arg NEXT_SERVER_URL=$NEXT_SERVER_URL --build-arg PACKAGE_PORT=$PACKAGE_PORT
    - docker push $AWS_CONTAINER_REPOSITORY_URL/$PATH_TO_REPO:$AWS_TAG

# LANDING(PROD)
build_prod_landing:
  stage: build
  variables:
    PATH_TO_REPO: landing
    PATH_TO_DOCKERFILE: ./docker/build.Dockerfile
    PACKAGE_NAME: landing
    SERVER_URL: https://ioka.kz
    NEXT_SERVER_URL: https://ioka.kz
    SENDER_EMAIL: sales@ioka.kz
    SENDER_EMAIL_PASSWORD: uAATIa13)xro
    PACKAGE_PORT: 3000
    AWS_TAG: latest
  tags:
    - docker
  <<: *build
  when: manual
  only:
    refs:
      - master

apply_prod_landing:
  <<: *apply
  variables:
    SSM_PATH: prod/landing
    PATH_TO_K8S_SCRIPTS: ./k8s
    CLUSTER_NAME: prod-cluster
    CI_PROJECT_TITLE: landing
    SSM_ARN_FOR_ENV_FILE: prod/landing
    REPLICAS: 1
    DEPLOY_NAMESPACE: default
    BASE_HOST: ioka.kz
    PATH_PREFIX: "`/`"
    CONTAINER_PORT: 3000
    PATH_TO_REPO: landing
    AWS_TAG: latest
  when: manual
  only:
    refs:
      - master

# LANDING(DEV)
build_dev_landing:
  stage: build
  variables:
    PATH_TO_REPO: landing
    PATH_TO_DOCKERFILE: ./docker/build.Dockerfile
    PACKAGE_NAME: landing
    SERVER_URL: https://dev.ioka.kz
    NEXT_SERVER_URL: https://dev.ioka.kz
    SENDER_EMAIL: sales@ioka.kz
    SENDER_EMAIL_PASSWORD: uAATIa13)xro
    PACKAGE_PORT: 3000
    AWS_TAG: latest
  tags:
    - docker
  <<: *build
  when: manual
  only:
    refs:
      - dev

apply_dev_landing:
  <<: *apply
  variables:
    SSM_PATH: dev/landing
    PATH_TO_K8S_SCRIPTS: ./k8s
    CLUSTER_NAME: dev-cluster
    CI_PROJECT_TITLE: landing
    SSM_ARN_FOR_ENV_FILE: dev/landing
    REPLICAS: 1
    DEPLOY_NAMESPACE: default
    BASE_HOST: landing.ioka.kz
    PATH_PREFIX: "`/`"
    CONTAINER_PORT: 3000
    PATH_TO_REPO: landing
    AWS_TAG: latest
  when: manual
  only:
    refs:
      - dev
